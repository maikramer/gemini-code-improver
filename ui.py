from PyQt6.QtGui import QAction
from PyQt6.QtWidgets import *
from PyQt6.QtCore import Qt


class UIMainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.improvement_groupbox = None
        self.setWindowTitle("Gemini Code Improver")
        self.setFixedSize(900, 650)  # Adjusted window size

        # --- UI Elements ---
        self.create_repo_list_section()
        self.create_user_repo_section()
        self.create_class_improvement_section()
        self.create_status_bar()

        # --- Layout ---
        main_layout = QVBoxLayout()
        main_layout.addWidget(self.repo_groupbox)
        main_layout.addWidget(self.user_repo_groupbox)
        main_layout.addWidget(self.improvement_groupbox)
        main_layout.addWidget(self.status_bar)
        self.setLayout(main_layout)

    def create_repo_list_section(self):
        self.repo_groupbox = QGroupBox("Training Repositories")
        repo_layout = QVBoxLayout()

        self.repo_list = QListWidget()
        self.repo_list.setToolTip("List of repositories for training Gemini.")
        repo_layout.addWidget(self.repo_list)

        input_layout = QHBoxLayout()
        self.add_repo_input = QLineEdit()
        self.add_repo_input.setPlaceholderText("Enter GitHub repository URL (e.g., https://github.com/user/repo)")
        self.add_repo_input.setToolTip("Enter the full URL of the GitHub repository.")
        input_layout.addWidget(self.add_repo_input)

        self.add_repo_button = QPushButton("Add")
        self.add_repo_button.setToolTip("Add the repository to the training list.")
        input_layout.addWidget(self.add_repo_button)

        self.remove_repo_button = QPushButton("Remove")
        self.remove_repo_button.setToolTip("Remove the selected repository from the training list.")
        input_layout.addWidget(self.remove_repo_button)

        self.pull_changes_button = QPushButton("Pull Changes")
        self.pull_changes_button.setToolTip("Pull the latest changes from the selected repositories.")
        input_layout.addWidget(self.pull_changes_button)

        repo_layout.addLayout(input_layout)
        self.repo_groupbox.setLayout(repo_layout)

    def create_user_repo_section(self):
        self.user_repo_groupbox = QGroupBox("Your Repository")
        user_repo_layout = QVBoxLayout()

        self.user_repo_input = QLineEdit()
        self.user_repo_input.setPlaceholderText("Enter your GitHub repository URL")
        self.user_repo_input.setToolTip("Enter the URL of the repository you want to improve.")
        user_repo_layout.addWidget(self.user_repo_input)

        self.analyze_button = QPushButton("Analyze Code")
        self.analyze_button.setToolTip("Analyze the code in your repository to identify classes and APIs.")
        user_repo_layout.addWidget(self.analyze_button)

        self.user_repo_groupbox.setLayout(user_repo_layout)

    def create_class_improvement_section(self):
        self.improvement_groupbox = QGroupBox("Class Improvement")
        improvement_layout = QVBoxLayout()

        class_selection_layout = QHBoxLayout()
        class_label = QLabel("Select Class:")
        class_selection_layout.addWidget(class_label)

        self.class_dropdown = QComboBox()
        self.class_dropdown.setToolTip("Select the class from your repository that you want to improve.")
        class_selection_layout.addWidget(self.class_dropdown)
        improvement_layout.addLayout(class_selection_layout)

        # --- Action Buttons ---
        action_buttons_layout = QHBoxLayout()

        self.upgrade_api_button = QPushButton("Upgrade APIs")
        self.upgrade_api_button.setToolTip("Upgrade API calls in the selected class to their latest versions.")
        action_buttons_layout.addWidget(self.upgrade_api_button)

        self.switch_api_button = QPushButton("Switch API")
        self.switch_api_button.setToolTip("Replace an existing API in the selected class with a different one.")
        action_buttons_layout.addWidget(self.switch_api_button)

        self.general_improve_button = QPushButton("General Improvements")
        self.general_improve_button.setToolTip(
            "Apply general code improvements to the selected class (refactoring, optimization, etc.).")
        action_buttons_layout.addWidget(self.general_improve_button)

        improvement_layout.addLayout(action_buttons_layout)

        self.code_output = QTextEdit()
        self.code_output.setReadOnly(True)
        self.code_output.setToolTip("The improved code generated by Gemini will be displayed here.")
        improvement_layout.addWidget(self.code_output)

        # --- Diff View ---
        self.diff_view = QTextEdit()
        self.diff_view.setReadOnly(True)
        self.diff_view.setFontFamily("Courier New")
        self.diff_view.setToolTip("Differences between the original and improved code will be shown here.")
        improvement_layout.addWidget(self.diff_view)

        # --- Apply Changes Button ---
        self.apply_changes_button = QPushButton("Apply Changes")
        self.apply_changes_button.setToolTip("Apply the suggested changes to your repository.")
        self.apply_changes_button.setEnabled(False)
        improvement_layout.addWidget(self.apply_changes_button)

        self.improvement_groupbox.setLayout(improvement_layout)

    def create_status_bar(self):
        self.status_bar = QStatusBar()
        self.progress_bar = QProgressBar()
        self.progress_bar.setValue(0)
        self.progress_bar.hide()
        self.status_label = QLabel("Ready")
        self.status_bar.addPermanentWidget(self.status_label)
        self.status_bar.addPermanentWidget(self.progress_bar)

    def open_settings(self):
        pass
